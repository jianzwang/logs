{:highlights [{:id #uuid "6236efd9-20f8-4198-8d90-245352a3e6e4", :page 396, :position {:bounding {:x1 49.265625, :y1 37.390625, :x2 552.0933837890625, :y2 69.390625, :width 747, :height 1055.8644614764019}, :rects ({:x1 117.0625, :y1 37.390625, :x2 552.0933837890625, :y2 69.390625, :width 747, :height 1055.8644614764019} {:x1 49.265625, :y1 39.53125, :x2 552.0933837890625, :y2 65.53125, :width 747, :height 1055.8644614764019}), :page 396}, :content {:text "Rc<T>, the Reference Counted Smart Pointer"}, :properties {:color "yellow"}} {:id #uuid "6236f29d-1443-4250-acdf-fbd2f8a39fe3", :page 401, :position {:bounding {:x1 49.265625, :y1 86.578125, :x2 694.9288330078125, :y2 129.234375, :width 747, :height 1055.8644614764019}, :rects ({:x1 49.265625, :y1 86.578125, :x2 694.9288330078125, :y2 107.578125, :width 747, :height 1055.8644614764019} {:x1 169.765625, :y1 89.578125, :x2 694.9288330078125, :y2 104.578125, :width 747, :height 1055.8644614764019} {:x1 49.265625, :y1 108.234375, :x2 325.5072021484375, :y2 129.234375, :width 747, :height 1055.8644614764019}), :page 401}, :content {:text "Interior mutability is a design pattern in Rust that allows you to mutate data even when thereare immutable references to that data; "}, :properties {:color "yellow"}} {:id #uuid "6236f349-14fa-435f-a858-e87a2844af9a", :page 402, :position {:bounding {:x1 49.265625, :y1 36.65625, :x2 677.3709106445312, :y2 101.921875, :width 747, :height 1055.8644614764019}, :rects ({:x1 300.3431396484375, :y1 36.65625, :x2 330.933837890625, :y2 57.65625, :width 747, :height 1055.8644614764019} {:x1 417.546875, :y1 36.65625, :x2 674.4976806640625, :y2 57.65625, :width 747, :height 1055.8644614764019} {:x1 334.703125, :y1 39.59375, :x2 674.4976806640625, :y2 54.59375, :width 747, :height 1055.8644614764019} {:x1 49.265625, :y1 59.265625, :x2 677.3709106445312, :y2 80.265625, :width 747, :height 1055.8644614764019} {:x1 49.265625, :y1 62.265625, :x2 677.3709106445312, :y2 77.265625, :width 747, :height 1055.8644614764019} {:x1 49.265625, :y1 80.921875, :x2 81.54820251464844, :y2 101.921875, :width 747, :height 1055.8644614764019}), :page 402}, :content {:text "The RefCell<T> type is useful when you’re sure yourcode follows the borrowing rules but the compiler is unable to understand and guaranteethat."}, :properties {:color "yellow"}} {:id #uuid "62370a01-b3fa-4358-878a-0acf04c3a9f5", :page 378, :position {:bounding {:x1 52.765625, :y1 92.3125, :x2 637.983154296875, :y2 113.3125, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 52.765625, :y1 92.3125, :x2 583.1412963867188, :y2 113.3125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 385.078125, :y1 95.3125, :x2 637.983154296875, :y2 111.3125, :width 799.9999999999999, :height 1130.7785397337634}), :page 378}, :content {:text "The most straightforward smart pointer is a box, whose type is written Box<T>"}, :properties {:color "yellow"}} {:id #uuid "62370b67-8083-4696-9752-e0a1c3b17002", :page 385, :position {:bounding {:x1 52.765625, :y1 125.59375, :x2 695.2913818359375, :y2 170.796875, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 52.765625, :y1 125.59375, :x2 190.82711791992188, :y2 146.59375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 241.234375, :y1 125.59375, :x2 695.2913818359375, :y2 146.59375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 194.859375, :y1 129.265625, :x2 695.2913818359375, :y2 143.265625, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 149.796875, :x2 115.27311706542969, :y2 170.796875, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 152.796875, :x2 115.27311706542969, :y2 168.796875, :width 799.9999999999999, :height 1130.7785397337634}), :page 385}, :content {:text "Implementing the Deref trait allows you to customize the behavior of the dereferenceoperator"}, :properties {:color "yellow"}} {:id #uuid "62370c4e-9c96-416b-8d98-79733d1d59bc", :page 388, :position {:bounding {:x1 52.765625, :y1 414.015625, :x2 740.6032104492188, :y2 483.421875, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 273.06243896484375, :y1 414.015625, :x2 304.0570068359375, :y2 435.015625, :width 799.9999999999999, :height 1130.7785397337634} {:x1 354.453125, :y1 414.015625, :x2 733.209716796875, :y2 435.015625, :width 799.9999999999999, :height 1130.7785397337634} {:x1 308.078125, :y1 417.6875, :x2 733.209716796875, :y2 431.6875, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 438.21875, :x2 311.7741394042969, :y2 459.21875, :width 799.9999999999999, :height 1130.7785397337634} {:x1 362.171875, :y1 438.21875, :x2 467.8270263671875, :y2 459.21875, :width 799.9999999999999, :height 1130.7785397337634} {:x1 509.75, :y1 438.21875, :x2 740.6032104492188, :y2 459.21875, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 441.21875, :x2 740.6032104492188, :y2 457.21875, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 462.421875, :x2 128.72842407226562, :y2 483.421875, :width 799.9999999999999, :height 1130.7785397337634}), :page 388}, :content {:text "The Deref trait, provided by the standard library, requires usto implement one method named deref that borrows self and returns a reference to theinner data"}, :properties {:color "yellow"}} {:id #uuid "62370f8a-7376-464e-984a-5e3a6289b893", :page 392, :position {:bounding {:x1 52.765625, :y1 92.3125, :x2 727.2598266601562, :y2 137.515625, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 540.068115234375, :y1 92.3125, :x2 727.2598266601562, :y2 113.3125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 116.515625, :x2 472.00408935546875, :y2 137.515625, :width 799.9999999999999, :height 1130.7785397337634}), :page 392}, :content {:text "which lets you customizewhat happens when a value is about to go out of scope."}, :properties {:color "yellow"}} {:id #uuid "623754a6-e39a-422e-96ca-5ba5b4e569f0", :page 421, :position {:bounding {:x1 52.765625, :y1 103.40625, :x2 716.1426391601562, :y2 124.40625, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 52.765625, :y1 103.40625, :x2 716.1426391601562, :y2 124.40625, :width 799.9999999999999, :height 1130.7785397337634}), :page 421}, :content {:text "Handling concurrent programming safely and efficiently is another of Rust’s major goals."}, :properties {:color "yellow"}} {:id #uuid "62375519-cbf3-4928-ad96-3e1ba3369e04", :page 422, :position {:bounding {:x1 52.765625, :y1 664.109375, :x2 740.8715209960938, :y2 779.90625, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 52.765625, :y1 664.109375, :x2 725.3590087890625, :y2 685.109375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 471.828125, :y1 667.109375, :x2 725.3590087890625, :y2 683.109375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 687.3125, :x2 740.8715209960938, :y2 708.3125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 690.3125, :x2 740.8715209960938, :y2 706.3125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 710.5, :x2 722.1511840820312, :y2 731.5, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 713.5, :x2 722.1511840820312, :y2 729.5, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 733.703125, :x2 81.58043670654297, :y2 754.703125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 98.109375, :y1 733.703125, :x2 241.63882446289062, :y2 754.703125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 258.15625, :y1 733.703125, :x2 514.067138671875, :y2 754.703125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 530.578125, :y1 733.703125, :x2 567.7265625, :y2 754.703125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 584.25, :y1 733.703125, :x2 729.7247314453125, :y2 754.703125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 736.703125, :x2 729.7247314453125, :y2 752.703125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 758.90625, :x2 191.17291259765625, :y2 779.90625, :width 799.9999999999999, :height 1130.7785397337634}), :page 422}, :content {:text "Programming language-provided threads are known as green threads, and languages thatuse these green threads will execute them in the context of a different number of operatingsystem threads. For this reason, the green-threaded model is called the M:N model: thereare M green threads per N operating system threads, where M and N are not necessarilythe same number."}, :properties {:color "yellow"}} {:id #uuid "62375553-688e-41d6-8dc2-f93140e967c9", :page 422, :position {:bounding {:x1 52.765625, :y1 1024.140625, :x2 742.6158447265625, :y2 1092.53125, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 594.6578979492188, :y1 1024.140625, :x2 742.6158447265625, :y2 1045.140625, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 1048.34375, :x2 668.5691528320312, :y2 1069.34375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 1051.34375, :x2 668.5691528320312, :y2 1067.34375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 1071.53125, :x2 155.01304626464844, :y2 1092.53125, :width 799.9999999999999, :height 1130.7785397337634}), :page 422}, :content {:text " Rust needs to havenearly no runtime and cannot compromise on being able to call into C to maintainperformance."}, :properties {:color "yellow"}} {:id #uuid "623757c0-c06d-4dcb-9b18-1e92f4d256bf", :page 430, :position {:bounding {:x1 52.765625, :y1 202.234375, :x2 726.9239501953125, :y2 246.421875, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 52.765625, :y1 202.234375, :x2 726.9239501953125, :y2 223.234375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 653.4375, :y1 205.234375, :x2 726.9239501953125, :y2 221.234375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 225.421875, :x2 673.0953369140625, :y2 246.421875, :width 799.9999999999999, :height 1130.7785397337634}), :page 430}, :content {:text "One major tool Rust has for accomplishing message-sending concurrency is the channel, aprogramming concept that Rust’s standard library provides an implementation of. "}, :properties {:color "yellow"}} {:id #uuid "623760a2-bb6e-4580-b5b3-3b184222bb9f", :page 437, :position {:bounding {:x1 52.765625, :y1 264.765625, :x2 704.794921875, :y2 332.15625, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 647.9497680664062, :y1 264.765625, :x2 704.794921875, :y2 285.765625, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 287.953125, :x2 698.5419921875, :y2 308.953125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 290.953125, :x2 698.5419921875, :y2 306.953125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 311.15625, :x2 320.4927978515625, :y2 332.15625, :width 799.9999999999999, :height 1130.7785397337634}), :page 437}, :content {:text " Sharedmemory concurrency is like multiple ownership: multiple threads can access the samememory location at the same time. "}, :properties {:color "yellow"}} {:id #uuid "623768f4-e6c1-4aa4-b7db-0e222f9bff74", :page 445, :position {:bounding {:x1 52.765625, :y1 365.609375, :x2 717.6658325195312, :y2 410.8125, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 52.765625, :y1 365.609375, :x2 84.84622192382812, :y2 386.609375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 126.78125, :y1 365.609375, :x2 679.7771606445312, :y2 386.609375, :width 799.9999999999999, :height 1130.7785397337634} {:x1 88.875, :y1 369.28125, :x2 717.6658325195312, :y2 383.28125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 389.8125, :x2 328.88201904296875, :y2 410.8125, :width 799.9999999999999, :height 1130.7785397337634}), :page 445}, :content {:text "The Send marker trait indicates that ownership of values of the type implementing Sendcan be transferred between threads. "}, :properties {:color "yellow"}} {:id #uuid "6237696b-6a78-445c-a557-97cf1f116ac8", :page 445, :position {:bounding {:x1 52.765625, :y1 802.28125, :x2 681.4012451171875, :y2 847.484375, :width 799.9999999999999, :height 1130.7785397337634}, :rects ({:x1 52.765625, :y1 802.28125, :x2 84.84622192382812, :y2 823.28125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 126.78125, :y1 802.28125, :x2 596.69482421875, :y2 823.28125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 638.625, :y1 802.28125, :x2 681.4012451171875, :y2 823.28125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 88.875, :y1 805.953125, :x2 681.4012451171875, :y2 819.953125, :width 799.9999999999999, :height 1130.7785397337634} {:x1 52.765625, :y1 826.484375, :x2 310.92431640625, :y2 847.484375, :width 799.9999999999999, :height 1130.7785397337634}), :page 445}, :content {:text "The Sync marker trait indicates that it is safe for the type implementing Sync to bereferenced from multiple threads. "}, :properties {:color "yellow"}}]}